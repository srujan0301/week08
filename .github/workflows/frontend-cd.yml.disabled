name: Frontend CD - Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: "Product API URL, e.g. http://<IP>:8000"
        required: true
      order_api_ip:
        description: "Order API URL, e.g. http://<IP>:8001"
        required: true

env:
  RG:  ${{ secrets.AZURE_RG }}
  AKS: ${{ secrets.AKS_NAME }}
  ACR_NAME:         ${{ secrets.ACR_NAME }}          # sit722wk8acr123
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}  # sit722wk8acr123.azurecr.io

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials -g "${{ env.RG }}" -n "${{ env.AKS }}" --overwrite-existing

      # create/refresh docker-registry secret for ACR pulls
      - name: Create/Update imagePullSecret (acr-pull)
        run: |
          kubectl create secret docker-registry acr-pull \
            --docker-server="${{ env.ACR_LOGIN_SERVER }}" \
            --docker-username="${{ secrets.ACR_USERNAME }}" \
            --docker-password="${{ secrets.ACR_PASSWORD }}" \
            --docker-email=ci@example.com \
            --dry-run=client -o yaml | kubectl apply -f -

      # Inject backend URLs into the frontend source then rebuild
      - name: Inject Backend IPs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"     frontend/main.js
          echo "----- main.js after injection -----"
          cat frontend/main.js

      - name: Login to ACR (for build & push)
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Build and Push Frontend Image
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/frontend:latest" ./frontend
          docker push "${{ env.ACR_LOGIN_SERVER }}/frontend:latest"

      # Apply K8s manifests and ensure deployment uses the pull secret
      - name: Apply Frontend K8s resources
        run: |
          kubectl apply -f k8s/frontend.yaml

      - name: Discover Frontend deployment by label
        id: names
        shell: bash
        run: |
          # expects metadata.labels.app: frontend in deployment spec
          FRONT_DEPLOY=$(kubectl get deploy -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          echo "front_deploy=$FRONT_DEPLOY" >> $GITHUB_OUTPUT
          echo "Frontend deployment: $FRONT_DEPLOY"

      - name: Patch frontend to use acr-pull
        run: |
          kubectl patch deployment "${{ steps.names.outputs.front_deploy }}" \
            -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"acr-pull"}]}}}}'

      - name: Wait for rollout & show state
        run: |
          kubectl rollout status deploy/"${{ steps.names.outputs.front_deploy }}" --timeout=180s || true
          kubectl get deploy,svc,pods -o wide

      - name: Logout Azure
        if: always()
        run: az logout
