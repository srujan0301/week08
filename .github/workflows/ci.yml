name: CI - Build & Test (All Services)

on:
  push:
    branches: ["*", "!main"]   # run CI on any branch except main
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]       # validate PRs into main

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME:     ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD:     ${{ secrets.ACR_PASSWORD }}
  IMAGE_TAG:        ${{ github.sha }}

jobs:
  test_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["5432:5432"]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["5433:5432"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip pytest httpx
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

  build_and_push:
    runs-on: ubuntu-latest
    needs: test_backends
    steps:
      - uses: actions/checkout@v4
      - name: Docker login to ACR
        run: echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ env.ACR_USERNAME }} --password-stdin
      - name: Build & Push product-service
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/product-service:latest" backend/product_service
          docker push "${{ env.ACR_LOGIN_SERVER }}/product-service:latest"
      - name: Build & Push order-service
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/order-service:latest" backend/order_service
          docker push "${{ env.ACR_LOGIN_SERVER }}/order-service:latest"
      - name: Build Frontend (sanity build)
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/frontend:ci-${{ env.IMAGE_TAG }}" ./frontend
          docker push "${{ env.ACR_LOGIN_SERVER }}/frontend:ci-${{ env.IMAGE_TAG }}"
